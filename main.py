import logging
import os
import asyncio
import time
from datetime import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InputFile, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.getenv("PORT", 10000))
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.user_channels = {}
        self.scheduled_mailings = []
        self.current_state = {}

db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
            [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")]
        ],
        resize_keyboard=True
    )

def get_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], 
        resize_keyboard=True
    )

def get_confirm_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

def get_channels_kb(user_id, prefix="select"):
    buttons = []
    if user_id in db.user_channels:
        for channel_id, channel_name in db.user_channels[user_id].items():
            buttons.append([
                InlineKeyboardButton(
                    text=channel_name or f"–ö–∞–Ω–∞–ª {channel_id}",
                    callback_data=f"{prefix}_{channel_id}"
                )
            ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running")

async def web_server():
    app = web.Application()
    app.router.add_get('/', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    while True:
        await asyncio.sleep(3600)

async def send_with_delay(channel_id: int, text: str, media_path: str):
    try:
        if media_path and os.path.exists(media_path):
            await bot.send_photo(
                chat_id=channel_id,
                photo=InputFile(media_path)
            )  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è send_photo
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã
        
        await bot.send_message(
            chat_id=channel_id,
            text=text
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_kb()
    )

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels:
        db.user_channels[user_id] = {}

    db.current_state[user_id] = {"action": "awaiting_channel"}
    await message.answer(
        "üì§ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=get_cancel_kb()
    )

@dp.message_handler(content_types=types.ContentType.ANY, is_forwarded=True)
async def handle_channel(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") == "awaiting_channel":
        channel = message.forward_from_chat
        if not channel:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
            return

        try:
            chat_member = await bot.get_chat_member(channel.id, bot.id)
            if chat_member.status not in ['administrator', 'creator']:
                await message.answer(
                    "‚ùå –Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                    reply_markup=get_main_kb()
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=get_main_kb()
            )
            return

        db.user_channels[user_id][channel.id] = channel.title
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_kb()
        )
        db.current_state.pop(user_id, None)

@dp.message_handler(lambda message: message.text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def list_channels(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    channels_list = "\n".join(
        f"{i+1}. {name}" if name else f"{i+1}. –ö–∞–Ω–∞–ª (ID: {id})"
        for i, (id, name) in enumerate(db.user_channels[user_id].items())
    )
    
    await message.answer(
        f"üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{channels_list}",
        reply_markup=get_main_kb()
    )

@dp.message_handler(lambda message: message.text == "üöÄ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def create_mailing(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª.",
            reply_markup=get_main_kb()
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_channels_kb(user_id)
    )

@dp.callback_query_handler(lambda c: c.data.startswith("select_"))
async def select_channel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = int(callback.data.split("_")[1])

    if user_id not in db.user_channels or channel_id not in db.user_channels[user_id]:
        await callback.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ", show_alert=True)
        return

    db.current_state[user_id] = {
        "action": "creating_mailing",
        "channel_id": channel_id,
        "step": "awaiting_time"
    }

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {db.user_channels[user_id][channel_id]}\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=get_cancel_kb()
    )
    await callback.answer()

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})
    
    if user_state.get("action") != "creating_mailing" or user_state.get("step") != "awaiting_media":
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
        if "media_path" in user_state and user_state["media_path"]:
            try:
                os.remove(user_state["media_path"])
            except:
                pass

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ–¥–∏–∞
        os.makedirs("media", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        local_path = f"media/{user_id}_{file_id}.jpg"
        await bot.download_file(file_path, local_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state["media_path"] = local_path
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        await confirm_mailing(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_cancel_kb()
        )

@dp.message_handler(lambda message: db.current_state.get(message.from_user.id, {}).get("action") == "creating_mailing")
async def process_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("step") == "awaiting_time":
        try:
            datetime.strptime(message.text, "%H:%M")
            user_state["time"] = message.text
            user_state["step"] = "awaiting_text"
            await message.answer(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=get_cancel_kb()
            )
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                reply_markup=get_cancel_kb()
            )

    elif user_state.get("step") == "awaiting_text":
        if not message.text.strip():
            await message.answer(
                "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
                reply_markup=get_cancel_kb()
            )
            return

        user_state["text"] = message.text.strip()
        user_state["step"] = "awaiting_media"
        await message.answer(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                resize_keyboard=True
            )
        )

    elif user_state.get("step") == "awaiting_media":
        if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_state["media_path"] = None
            await confirm_mailing(message)

async def confirm_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "creating_mailing":
        return

    channel_id = user_state.get("channel_id")
    time_str = user_state.get("time")
    text = user_state.get("text")
    media_path = user_state.get("media_path")

    if None in [channel_id, time_str, text]:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_main_kb()
        )
        db.current_state.pop(user_id, None)
        return

    db.current_state[user_id] = {
        "action": "confirming_mailing",
        "mailing_data": {
            "channel_id": channel_id,
            "time": time_str,
            "text": text,
            "media_path": media_path
        }
    }

    channel_name = db.user_channels[user_id][channel_id]
    confirm_text = (
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}:\n\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
        f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    )

    if media_path and os.path.exists(media_path):
        try:
            await message.answer_photo(
                photo=InputFile(media_path),
                caption=confirm_text,
                reply_markup=get_confirm_kb()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer(
                confirm_text,
                reply_markup=get_confirm_kb()
            )
    else:
        await message.answer(
            confirm_text,
            reply_markup=get_confirm_kb()
        )

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def finalize_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "confirming_mailing":
        return

    mailing_data = user_state.get("mailing_data", {})
    channel_id = mailing_data.get("channel_id")
    time_str = mailing_data.get("time")
    text = mailing_data.get("text")
    media_path = mailing_data.get("media_path")

    if None in [channel_id, time_str, text]:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_main_kb()
        )
        db.current_state.pop(user_id, None)
        return

    try:
        hour, minute = map(int, time_str.split(":"))
        channel_name = db.user_channels[user_id][channel_id]

        job_id = f"mailing_{user_id}_{channel_id}_{int(time.time())}"

        scheduler.add_job(
            send_with_delay,
            'cron',
            hour=hour,
            minute=minute,
            args=[channel_id, text, media_path],
            id=job_id
        )

        db.scheduled_mailings.append({
            "user_id": user_id,
            "channel_id": channel_id,
            "time": time_str,
            "text": text,
            "media_path": media_path,
            "job_id": job_id
        })

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {hour:02d}:{minute:02d} (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)",
            reply_markup=get_main_kb()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_main_kb()
        )
    finally:
        db.current_state.pop(user_id, None)

@dp.message_handler(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def delete_channel_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_channels_kb(user_id, "delete")
    )

@dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
async def delete_channel_confirm(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = int(callback.data.split("_")[1])

    if user_id not in db.user_channels or channel_id not in db.user_channels[user_id]:
        await callback.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ", show_alert=True)
        return

    channel_name = db.user_channels[user_id][channel_id]
    db.current_state[user_id] = {
        "action": "deleting_channel",
        "channel_id": channel_id
    }

    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_name}?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )
    await callback.answer()

@dp.message_handler(lambda message: message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
async def delete_channel_final(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "deleting_channel":
        return

    channel_id = user_state.get("channel_id")
    if user_id in db.user_channels and channel_id in db.user_channels[user_id]:
        channel_name = db.user_channels[user_id].pop(channel_id)
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_main_kb()
        )

    db.current_state.pop(user_id, None)

@dp.message_handler(lambda message: message.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
async def cancel_channel_deletion(message: types.Message):
    user_id = message.from_user.id
    db.current_state.pop(user_id, None)
    await message.answer(
        "–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_kb()
    )

@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state:
        if "media_path" in user_state and user_state["media_path"]:
            try:
                os.remove(user_state["media_path"])
            except:
                pass
        elif "mailing_data" in user_state and "media_path" in user_state["mailing_data"]:
            try:
                os.remove(user_state["mailing_data"]["media_path"])
            except:
                pass

    db.current_state.pop(user_id, None)
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_kb()
    )

@dp.errors_handler(exception=TerminatedByOtherGetUpdates)
async def handle_conflict_error(update: types.Update, exception: TerminatedByOtherGetUpdates):
    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    await asyncio.sleep(5)
    await dp.start_polling()
    return True

async def on_startup(_):
    if not os.path.exists("media"):
        os.makedirs("media")

    if not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω")

    await bot.delete_webhook(drop_pending_updates=True)
    
    asyncio.create_task(web_server())
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

if __name__ == '__main__':
    from aiogram import executor
    
    executor.start_polling(
        dp,
        on_startup=on_startup,
        skip_updates=True,
        timeout=60,
        relax=5,
        reset_webhook=True
    )
